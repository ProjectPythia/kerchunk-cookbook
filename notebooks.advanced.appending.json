{"version":2,"kind":"Notebook","sha256":"cfb2cd2a40738fda1f3cf29605fe45e9be39b96b54574b40f164dba8d35a867f","slug":"notebooks.advanced.appending","location":"/notebooks/advanced/appending.ipynb","dependencies":[],"frontmatter":{"title":"Appending to Kerchunk references","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"kerchunk-cookbook","language":"python"},"authors":[{"nameParsed":{"literal":"Norland Raphael Hagen","given":"Norland Raphael","family":"Hagen"},"name":"Norland Raphael Hagen","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/kerchunk-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/kerchunk-cookbook/blob/main/notebooks/advanced/appending.ipynb","exports":[{"format":"ipynb","filename":"appending.ipynb","url":"/kerchunk-cookbook/build/appending-0ca91d8a72b8e0765c1f4d3bcf68b3b3.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oc6SceGB5c"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"UXS8Fa0Caf"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this tutorial we’ll show how to append to a pre-existing Kerchunk reference. We’ll use the same datasets as in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NrmO0MpCHt"},{"type":"link","url":"/notebooks/generating-references/netcdf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"NetCDF reference generation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GrS7pbgWwf"}],"urlSource":"../generating_references/NetCDF.ipynb","dataUrl":"/notebooks.generating-references.netcdf.json","internal":true,"protocol":"file","key":"BVnsItLY93"},{"type":"text","value":" example.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OLOz5GgVqH"}],"key":"tFPuNHhBHk"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"K85GnsCbYB"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"N5nn1oob1E"},{"type":"table","position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"U3pDlalduR"}],"key":"eXM3rjkXqy"},{"type":"tableCell","header":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"x4fKBzI4Xl"}],"key":"wwrndtFn08"},{"type":"tableCell","header":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HRgpcJWhta"}],"key":"iHjIVnpAm8"}],"key":"nmuYj74FQh"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"../foundations/kerchunk_basics","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Kerchunk Basics","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JYU3PEebWm"}],"urlSource":"../foundations/kerchunk_basics","key":"ZFJMzsQPoH"}],"key":"sgcpKwwnzi"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Required","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"OgcilBtJmR"}],"key":"boAqQHk0bl"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Core","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"fUzLN6x4Kh"}],"key":"H1blC3TygR"}],"key":"JXym6Trrqw"},{"type":"tableRow","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"../foundations/kerchunk_multi_file","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Multiple Files and Kerchunk","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"H8h4SwbLWj"}],"urlSource":"../foundations/kerchunk_multi_file","key":"FhYu0PAa62"}],"key":"HYi7unjNxG"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Required","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"CabhHJQK4u"}],"key":"Idn0cy5vLW"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Core","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Kys5wwgX3d"}],"key":"T5GNk1PCGX"}],"key":"GI0bd3VNVn"},{"type":"tableRow","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"../case_studies/ARG_Weather.ipynb","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Multi-File Datasets with Kerchunk","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"zI1pp7EPGd"}],"urlSource":"../case_studies/ARG_Weather.ipynb","key":"viLkj74ie6"}],"key":"aYpuXJYllv"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Required","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"bQazkR2760"}],"key":"waRLd2dlOs"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"IO/Visualization","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"C3XzW43tsX"}],"key":"mK34RCiPny"}],"key":"oZyIhoAtOi"}],"key":"p8tL8yA9x0"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"RHEv27K4gA"}],"key":"E82Ev47jOD"},{"type":"text","value":": 45 minutes","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"XWftDnznfu"}],"key":"OYkmfqX6Pw"}],"key":"ZCKlWiik8l"},{"type":"thematicBreak","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"Ip0kFbIpfZ"}],"key":"oT8VuDEsqG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LFv77xj62a"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"MfYhROvUoq"}],"key":"hbjuarZa13"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import logging\nfrom tempfile import TemporaryDirectory\n\nimport dask\nimport fsspec\nimport ujson\nimport xarray as xr\nfrom distributed import Client\nfrom kerchunk.combine import MultiZarrToZarr\nfrom kerchunk.hdf import SingleHdf5ToZarr","key":"JfLDT3AyEJ"},{"type":"output","id":"5LulZcnLPgHiis_znwz9C","data":[],"key":"oEAexEXnNA"}],"key":"bKicV3PY6v"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create Input File List","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LVxHZfHc1U"}],"identifier":"create-input-file-list","label":"Create Input File List","html_id":"create-input-file-list","implicit":true,"key":"rrx3Ttt0XH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we are using ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YH0wtArpKs"},{"type":"inlineCode","value":"fsspec's","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wnPTSqTaOA"},{"type":"text","value":" glob functionality along with the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WFvxWuFSZS"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"*","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"I83faM0R65"}],"key":"txxH2rC85U"},{"type":"text","value":" wildcard operator and some string slicing to grab a list of NetCDF files from a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zotXabVgew"},{"type":"inlineCode","value":"s3","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YwGEUC6xYB"},{"type":"text","value":" ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lkdPpvbkdB"},{"type":"inlineCode","value":"fsspec","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"riGSWCFn8v"},{"type":"text","value":" filesystem.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TqG3w2bnVI"}],"key":"bs9MpdEDD1"}],"key":"IkvAZXcir9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Initiate fsspec filesystems for reading\nfs_read = fsspec.filesystem(\"s3\", anon=True, skip_instance_cache=True)\n\nfiles_paths = fs_read.glob(\n    \"s3://smn-ar-wrf/DATA/WRF/DET/2022/12/31/12/WRFDETAR_01H_20221231_12_*\"\n)\n\n# Here we prepend the prefix 's3://', which points to AWS.\nfile_pattern = sorted([\"s3://\" + f for f in files_paths])","key":"anFN1dhS65"},{"type":"output","id":"AAWUcIiHP46sspvPRr87w","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mAttributeError\u001b[39m                            Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 4\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# Initiate fsspec filesystems for reading\u001b[39;00m\n\u001b[32m      2\u001b[39m fs_read = fsspec.filesystem(\u001b[33m\"\u001b[39m\u001b[33ms3\u001b[39m\u001b[33m\"\u001b[39m, anon=\u001b[38;5;28;01mTrue\u001b[39;00m, skip_instance_cache=\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[32m----> \u001b[39m\u001b[32m4\u001b[39m files_paths = \u001b[43mfs_read\u001b[49m\u001b[43m.\u001b[49m\u001b[43mglob\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      5\u001b[39m \u001b[43m    \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43ms3://smn-ar-wrf/DATA/WRF/DET/2022/12/31/12/WRFDETAR_01H_20221231_12_*\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\n\u001b[32m      6\u001b[39m \u001b[43m)\u001b[49m\n\u001b[32m      8\u001b[39m \u001b[38;5;66;03m# Here we prepend the prefix 's3://', which points to AWS.\u001b[39;00m\n\u001b[32m      9\u001b[39m file_pattern = \u001b[38;5;28msorted\u001b[39m([\u001b[33m\"\u001b[39m\u001b[33ms3://\u001b[39m\u001b[33m\"\u001b[39m + f \u001b[38;5;28;01mfor\u001b[39;00m f \u001b[38;5;129;01min\u001b[39;00m files_paths])\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:118\u001b[39m, in \u001b[36msync_wrapper.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    115\u001b[39m \u001b[38;5;129m@functools\u001b[39m.wraps(func)\n\u001b[32m    116\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mwrapper\u001b[39m(*args, **kwargs):\n\u001b[32m    117\u001b[39m     \u001b[38;5;28mself\u001b[39m = obj \u001b[38;5;129;01mor\u001b[39;00m args[\u001b[32m0\u001b[39m]\n\u001b[32m--> \u001b[39m\u001b[32m118\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msync\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mloop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:103\u001b[39m, in \u001b[36msync\u001b[39m\u001b[34m(loop, func, timeout, *args, **kwargs)\u001b[39m\n\u001b[32m    101\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m FSTimeoutError \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mreturn_result\u001b[39;00m\n\u001b[32m    102\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(return_result, \u001b[38;5;167;01mBaseException\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m103\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m return_result\n\u001b[32m    104\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    105\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m return_result\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:56\u001b[39m, in \u001b[36m_runner\u001b[39m\u001b[34m(event, coro, result, timeout)\u001b[39m\n\u001b[32m     54\u001b[39m     coro = asyncio.wait_for(coro, timeout=timeout)\n\u001b[32m     55\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m---> \u001b[39m\u001b[32m56\u001b[39m     result[\u001b[32m0\u001b[39m] = \u001b[38;5;28;01mawait\u001b[39;00m coro\n\u001b[32m     57\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\u001b[32m     58\u001b[39m     result[\u001b[32m0\u001b[39m] = ex\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:807\u001b[39m, in \u001b[36mAsyncFileSystem._glob\u001b[39m\u001b[34m(self, path, maxdepth, **kwargs)\u001b[39m\n\u001b[32m    804\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    805\u001b[39m         depth = \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m807\u001b[39m allpaths = \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._find(\n\u001b[32m    808\u001b[39m     root, maxdepth=depth, withdirs=\u001b[38;5;28;01mTrue\u001b[39;00m, detail=\u001b[38;5;28;01mTrue\u001b[39;00m, **kwargs\n\u001b[32m    809\u001b[39m )\n\u001b[32m    811\u001b[39m pattern = glob_translate(path + (\u001b[33m\"\u001b[39m\u001b[33m/\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m ends_with_sep \u001b[38;5;28;01melse\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33m\"\u001b[39m))\n\u001b[32m    812\u001b[39m pattern = re.compile(pattern)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:558\u001b[39m, in \u001b[36mS3FileSystem._find\u001b[39m\u001b[34m(self, path, maxdepth, withdirs, detail)\u001b[39m\n\u001b[32m    556\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mCannot traverse all of S3\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    557\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m maxdepth:\n\u001b[32m--> \u001b[39m\u001b[32m558\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()._find(\n\u001b[32m    559\u001b[39m         bucket + \u001b[33m\"\u001b[39m\u001b[33m/\u001b[39m\u001b[33m\"\u001b[39m + key, maxdepth=maxdepth, withdirs=withdirs, detail=detail\n\u001b[32m    560\u001b[39m     )\n\u001b[32m    561\u001b[39m \u001b[38;5;66;03m# TODO: implement find from dircache, if all listings are present\u001b[39;00m\n\u001b[32m    562\u001b[39m \u001b[38;5;66;03m# if refresh is False:\u001b[39;00m\n\u001b[32m    563\u001b[39m \u001b[38;5;66;03m#     out = incomplete_tree_dirs(self.dircache, path)\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m    568\u001b[39m \u001b[38;5;66;03m#         return super().find(path)\u001b[39;00m\n\u001b[32m    569\u001b[39m \u001b[38;5;66;03m#     # else: we refresh anyway, having at least two missing trees\u001b[39;00m\n\u001b[32m    570\u001b[39m out = \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._lsdir(path, delimiter=\u001b[33m\"\u001b[39m\u001b[33m\"\u001b[39m)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:847\u001b[39m, in \u001b[36mAsyncFileSystem._find\u001b[39m\u001b[34m(self, path, maxdepth, withdirs, **kwargs)\u001b[39m\n\u001b[32m    843\u001b[39m detail = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33mdetail\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[32m    845\u001b[39m \u001b[38;5;66;03m# Add the root directory if withdirs is requested\u001b[39;00m\n\u001b[32m    846\u001b[39m \u001b[38;5;66;03m# This is needed for posix glob compliance\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m847\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m withdirs \u001b[38;5;129;01mand\u001b[39;00m path != \u001b[33m\"\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._isdir(path):\n\u001b[32m    848\u001b[39m     out[path] = \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._info(path)\n\u001b[32m    850\u001b[39m \u001b[38;5;66;03m# async for?\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:1021\u001b[39m, in \u001b[36mS3FileSystem._isdir\u001b[39m\u001b[34m(self, path)\u001b[39m\n\u001b[32m   1018\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[32m   1020\u001b[39m \u001b[38;5;66;03m# This only returns things within the path and NOT the path object itself\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1021\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mbool\u001b[39m(\u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._lsdir(path))\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:509\u001b[39m, in \u001b[36mS3FileSystem._lsdir\u001b[39m\u001b[34m(self, path, refresh, max_items, delimiter)\u001b[39m\n\u001b[32m    507\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    508\u001b[39m     logger.debug(\u001b[33m\"\u001b[39m\u001b[33mGet directory listing page for \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m\"\u001b[39m % path)\n\u001b[32m--> \u001b[39m\u001b[32m509\u001b[39m     \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._connect()\n\u001b[32m    510\u001b[39m     pag = \u001b[38;5;28mself\u001b[39m.s3.get_paginator(\u001b[33m\"\u001b[39m\u001b[33mlist_objects_v2\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    511\u001b[39m     config = {}\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:365\u001b[39m, in \u001b[36mS3FileSystem._connect\u001b[39m\u001b[34m(self, refresh, kwargs)\u001b[39m\n\u001b[32m    363\u001b[39m     config_kwargs[\u001b[33m\"\u001b[39m\u001b[33msignature_version\u001b[39m\u001b[33m\"\u001b[39m] = UNSIGNED\n\u001b[32m    364\u001b[39m conf = AioConfig(**config_kwargs)\n\u001b[32m--> \u001b[39m\u001b[32m365\u001b[39m \u001b[38;5;28mself\u001b[39m.session = \u001b[43maiobotocore\u001b[49m\u001b[43m.\u001b[49m\u001b[43mAioSession\u001b[49m(**\u001b[38;5;28mself\u001b[39m.kwargs)\n\u001b[32m    366\u001b[39m s3creator = \u001b[38;5;28mself\u001b[39m.session.create_client(\n\u001b[32m    367\u001b[39m     \u001b[33m\"\u001b[39m\u001b[33ms3\u001b[39m\u001b[33m\"\u001b[39m, config=conf, **init_kwargs, **client_kwargs\n\u001b[32m    368\u001b[39m )\n\u001b[32m    369\u001b[39m \u001b[38;5;28mself\u001b[39m._s3creator = s3creator\n\n\u001b[31mAttributeError\u001b[39m: module 'aiobotocore' has no attribute 'AioSession'","ename":"AttributeError","evalue":"module 'aiobotocore' has no attribute 'AioSession'"}],"key":"QSl6GzBvvq"}],"key":"hU9PR95iEb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# This dictionary will be passed as kwargs to `fsspec`. For more details, check out the\n# `foundations/kerchunk_basics` notebook.\nso = dict(mode=\"rb\", anon=True, default_fill_cache=False, default_cache_type=\"first\")\n\n# We are creating a temporary directory to store the .json reference files\n# Alternately, you could write these to cloud storage.\ntd = TemporaryDirectory()\ntemp_dir = td.name","key":"g4tlBvNULe"},{"type":"output","id":"JKBSCJWMrwziupCCjDwvr","data":[],"key":"QC2IPZPlIr"}],"key":"Oyop7nqvtO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Start a Dask Client","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Kn5VZm7coc"}],"identifier":"start-a-dask-client","label":"Start a Dask Client","html_id":"start-a-dask-client","implicit":true,"key":"OoFrC47bLg"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To parallelize the creation of our reference files, we will use ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OKzFsm4orv"},{"type":"inlineCode","value":"Dask","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rdzk8wUTvU"},{"type":"text","value":". For a detailed guide on how to use Dask and Kerchunk, see the Foundations notebook: ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XIaHEsU9j1"},{"type":"link","url":"../foundations/kerchunk_dask","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Kerchunk and Dask","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"deGpfgwQop"}],"urlSource":"../foundations/kerchunk_dask","key":"oAqWvW1YdT"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B9VEomAS0k"}],"key":"RiO4EGUIpc"}],"key":"pYiZqn3Oif"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client = Client(n_workers=8, silence_logs=logging.ERROR)\nclient","key":"Aht69novk8"},{"type":"output","id":"QzCFEpsvz4qofLZppiTAr","data":[],"key":"WAakUqrT5X"}],"key":"Es0nY2zLNi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I5dkapoPhC"},{"type":"inlineCode","value":"Kerchunk","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ItWMCdmdBY"},{"type":"text","value":" reference file for the first 24 hours","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"evLqQaIOC1"}],"identifier":"create-a-kerchunk-reference-file-for-the-first-24-hours","label":"Create a Kerchunk reference file for the first 24 hours","html_id":"create-a-kerchunk-reference-file-for-the-first-24-hours","implicit":true,"key":"HmgjxsuRtV"}],"key":"seRxriOYfv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"first_24_hrs = file_pattern[:24]","key":"WvHw566NI3"},{"type":"output","id":"Urxn2iEe0G5f-kR-p1Co9","data":[],"key":"pWMhIiiUum"}],"key":"ZHlZWEbQOr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Use Kerchunk's `SingleHdf5ToZarr` method to create a `Kerchunk` index from\n# a NetCDF file.\n\n\ndef generate_json_reference(fil, output_dir: str):\n    with fs_read.open(fil, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, fil, inline_threshold=300)\n        fname = fil.split(\"/\")[-1].strip(\".nc\")\n        outf = f\"{output_dir}/{fname}.json\"\n        with open(outf, \"wb\") as f:\n            f.write(ujson.dumps(h5chunks.translate()).encode())\n        return outf\n\n\n# Generate Dask Delayed objects\ntasks = [dask.delayed(generate_json_reference)(fil, temp_dir) for fil in first_24_hrs]","key":"gucyePOE48"},{"type":"output","id":"YGW7HuSnV8VW_gfnC-yql","data":[],"key":"rKLzniv9AR"}],"key":"nYWIyIDHwh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Start parallel processing\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\ndask.compute(tasks)","key":"hs3uCZEDWi"},{"type":"output","id":"BfdOnCAdYrr4fFbVsLnNY","data":[],"key":"cunXkbNDbS"}],"key":"gKP0DDOvmC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Combine .json ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"La0QVyXJ4e"},{"type":"inlineCode","value":"Kerchunk","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XH4dBnc6nu"},{"type":"text","value":" reference files and write a combined ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RBx06CwfV4"},{"type":"inlineCode","value":"Kerchunk","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bdepz3mmHw"},{"type":"text","value":" index","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kihnTVQgPB"}],"identifier":"combine-json-kerchunk-reference-files-and-write-a-combined-kerchunk-index","label":"Combine .json Kerchunk reference files and write a combined Kerchunk index","html_id":"combine-json-kerchunk-reference-files-and-write-a-combined-kerchunk-index","implicit":true,"key":"segUmlukXr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell, we are combining all the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aqmoOhlz8f"},{"type":"inlineCode","value":".json","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CPE6uLPPp5"},{"type":"text","value":" reference files that were generated above into a single reference file and writing that file to disk.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QCXJfPw6tu"}],"key":"auo0SUiLZh"}],"key":"BBWU1vXM0n"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create a list of reference json files\noutput_files = [\n    f\"{temp_dir}/{f.strip('.nc').split('/')[-1]}.json\" for f in first_24_hrs\n]\n\n# combine individual references into single consolidated reference\nmzz = MultiZarrToZarr(\n    output_files,\n    concat_dims=[\"time\"],\n    identical_dims=[\"y\", \"x\"],\n    remote_protocol=\"s3\",\n    remote_options={\"anon\": True},\n    coo_map={\"time\": \"cf:time\"},\n)\n# save translate reference in memory for later visualization\nmulti_kerchunk = mzz.translate()\n\n# Write kerchunk .json record.\noutput_fname = \"ARG_combined.json\"\nwith open(f\"{output_fname}\", \"wb\") as f:\n    f.write(ujson.dumps(multi_kerchunk).encode())","key":"rAr3pwWFLp"},{"type":"output","id":"KqOvjGm7QERsNAmKYNO_d","data":[],"key":"c2SoQFpH87"}],"key":"TkQYE9QgAm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Append references for the next 24 hours","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JfLxkzQoCO"}],"identifier":"append-references-for-the-next-24-hours","label":"Append references for the next 24 hours","html_id":"append-references-for-the-next-24-hours","implicit":true,"key":"jVbwoW8yMm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"We’ll now append the references for the next 24 hours. First, we create an individual temporary reference file for each input data file. Then,\nwe load the original references and append the new references.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bi2cJnyXB3"}],"key":"lrNiDzLfR4"}],"key":"wtFTemi6Hi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# First generate the individual reference files to be appended\n\nsecond_24_hrs = file_pattern[24:48]\n\n# Generate Dask Delayed objects\ntasks = [dask.delayed(generate_json_reference)(fil, temp_dir) for fil in second_24_hrs]\n\n# Generate reference files for the individual NetCDF files\ndask.compute(tasks)","key":"db5Sv2VWfN"},{"type":"output","id":"-4LeZAQ4pzVMXWr8V-z9k","data":[],"key":"KWYAKPD4CC"}],"key":"X3TGmRLOsf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load the original references\nfs_local = fsspec.filesystem(\"file\")\narchive = ujson.load(fs_local.open(output_fname))","key":"xsYaptp2qK"},{"type":"output","id":"sTA6baUwh-09ZBxxIEvVS","data":[],"key":"r1FqHSMnZg"}],"key":"JPu0Sr4BsG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create a list of individual reference files to append to the combined reference\noutput_files = [\n    f\"{temp_dir}/{f.strip('.nc').split('/')[-1]}.json\" for f in second_24_hrs\n]\n\n# Append to the existing reference file\nmzz = MultiZarrToZarr.append(\n    output_files,\n    original_refs=archive,\n    concat_dims=[\"time\"],\n    identical_dims=[\"y\", \"x\"],\n    remote_protocol=\"s3\",\n    remote_options={\"anon\": True},\n    coo_map={\"time\": \"cf:time\"},\n)\n\nmulti_kerchunk = mzz.translate()\n\n# Write kerchunk .json record.\noutput_fname = \"ARG_combined.json\"\nwith open(f\"{output_fname}\", \"wb\") as f:\n    f.write(ujson.dumps(multi_kerchunk).encode())","key":"OTD1aPzldM"},{"type":"output","id":"Z2N0g2YuHCLKmL4hYEhtE","data":[],"key":"vHerJXXjcC"}],"key":"aerdTFCDEy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Opening Reference Dataset with Fsspec and Xarray","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JNLCaSHjw3"}],"identifier":"opening-reference-dataset-with-fsspec-and-xarray","label":"Opening Reference Dataset with Fsspec and Xarray","html_id":"opening-reference-dataset-with-fsspec-and-xarray","implicit":true,"key":"mf3DD9Gj7W"}],"key":"jruux7NWbh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"storage_options = {\n    \"remote_protocol\": \"s3\",\n    \"skip_instance_cache\": True,\n    \"remote_options\": {\"anon\": True}\n}  # options passed to fsspec\nopen_dataset_options = {\"chunks\": {}}  # opens passed to xarray\n\nds = xr.open_dataset(\n    \"ARG_combined.json\",\n    engine=\"kerchunk\",\n    storage_options=storage_options,\n    open_dataset_options=open_dataset_options,\n)","key":"guHuk4FtrW"},{"type":"output","id":"OWPjA_avmKjT8u-MRxLrP","data":[],"key":"tLXLjqd4as"}],"key":"dVlEFHFBOY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds\n","key":"vS6yNsTaPG"},{"type":"output","id":"e3SaC1Wugt1KYbPGgS5E7","data":[],"key":"chT60IorzY"}],"key":"iCOv5XEp0I"}],"key":"yyRcV2zPsC"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Store virtual datasets as Kerchunk Parquet references","url":"/notebooks/advanced/parquet-reference-storage","group":"Advanced"},"next":{"title":"NetCDF","url":"/notebooks/generating-references/netcdf","group":"Generating Reference Files"}}},"domain":"http://localhost:3000"}
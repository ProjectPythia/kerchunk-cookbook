Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Input URL to dataset. Note this is a netcdf file stored on s3 (cloud dataset).
url = "s3://wrf-se-ak-ar5/ccsm/rcp85/daily/2060/WRFDS_2060-01-01.nc"

# Uses kerchunk to scan through the netcdf file to create kerchunk mapping and then save output as .json
# Note: In this example, we write the kerchunk output to a .json file.
# You could also keep this information in memory and pass it to fsspec
with fsspec.open(url, **so) as inf:
    h5chunks = kerchunk.hdf.SingleHdf5ToZarr(inf, url, inline_threshold=100)
    h5chunks.translate()
    with open("single_file_kerchunk.json", "wb") as f:
        f.write(ujson.dumps(h5chunks.translate()).encode())
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/registry.py:211[0m, in [0;36mget_filesystem_class[0;34m(protocol)[0m
[1;32m    210[0m [38;5;28;01mtry[39;00m:
[0;32m--> 211[0m     register_implementation(protocol, [43m_import_class[49m[43m([49m[43mbit[49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mclass[39;49m[38;5;124;43m"[39;49m[43m][49m[43m)[49m)
[1;32m    212[0m [38;5;28;01mexcept[39;00m [38;5;167;01mImportError[39;00m [38;5;28;01mas[39;00m e:

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/registry.py:234[0m, in [0;36m_import_class[0;34m(cls, minv)[0m
[1;32m    233[0m mod, name [38;5;241m=[39m [38;5;28mcls[39m[38;5;241m.[39mrsplit([38;5;124m"[39m[38;5;124m.[39m[38;5;124m"[39m, [38;5;241m1[39m)
[0;32m--> 234[0m mod [38;5;241m=[39m [43mimportlib[49m[38;5;241;43m.[39;49m[43mimport_module[49m[43m([49m[43mmod[49m[43m)[49m
[1;32m    235[0m [38;5;28;01mreturn[39;00m [38;5;28mgetattr[39m(mod, name)

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/importlib/__init__.py:126[0m, in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    125[0m         level [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[0;32m--> 126[0m [38;5;28;01mreturn[39;00m [43m_bootstrap[49m[38;5;241;43m.[39;49m[43m_gcd_import[49m[43m([49m[43mname[49m[43m[[49m[43mlevel[49m[43m:[49m[43m][49m[43m,[49m[43m [49m[43mpackage[49m[43m,[49m[43m [49m[43mlevel[49m[43m)[49m

File [0;32m<frozen importlib._bootstrap>:1050[0m, in [0;36m_gcd_import[0;34m(name, package, level)[0m

File [0;32m<frozen importlib._bootstrap>:1027[0m, in [0;36m_find_and_load[0;34m(name, import_)[0m

File [0;32m<frozen importlib._bootstrap>:1004[0m, in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;31mModuleNotFoundError[0m: No module named 's3fs'

The above exception was the direct cause of the following exception:

[0;31mImportError[0m                               Traceback (most recent call last)
Cell [0;32mIn[3], line 7[0m
[1;32m      2[0m url [38;5;241m=[39m [38;5;124m"[39m[38;5;124ms3://wrf-se-ak-ar5/ccsm/rcp85/daily/2060/WRFDS_2060-01-01.nc[39m[38;5;124m"[39m
[1;32m      4[0m [38;5;66;03m# Uses kerchunk to scan through the netcdf file to create kerchunk mapping and then save output as .json[39;00m
[1;32m      5[0m [38;5;66;03m# Note: In this example, we write the kerchunk output to a .json file.[39;00m
[1;32m      6[0m [38;5;66;03m# You could also keep this information in memory and pass it to fsspec[39;00m
[0;32m----> 7[0m [38;5;28;01mwith[39;00m [43mfsspec[49m[38;5;241;43m.[39;49m[43mopen[49m[43m([49m[43murl[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mso[49m[43m)[49m [38;5;28;01mas[39;00m inf:
[1;32m      8[0m     h5chunks [38;5;241m=[39m kerchunk[38;5;241m.[39mhdf[38;5;241m.[39mSingleHdf5ToZarr(inf, url, inline_threshold[38;5;241m=[39m[38;5;241m100[39m)
[1;32m      9[0m     h5chunks[38;5;241m.[39mtranslate()

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/core.py:419[0m, in [0;36mopen[0;34m(urlpath, mode, compression, encoding, errors, protocol, newline, **kwargs)[0m
[1;32m    369[0m [38;5;28;01mdef[39;00m [38;5;21mopen[39m(
[1;32m    370[0m     urlpath,
[1;32m    371[0m     mode[38;5;241m=[39m[38;5;124m"[39m[38;5;124mrb[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m    377[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs,
[1;32m    378[0m ):
[1;32m    379[0m [38;5;250m    [39m[38;5;124;03m"""Given a path or paths, return one ``OpenFile`` object.[39;00m
[1;32m    380[0m 
[1;32m    381[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    417[0m [38;5;124;03m    ``OpenFile`` object.[39;00m
[1;32m    418[0m [38;5;124;03m    """[39;00m
[0;32m--> 419[0m     [38;5;28;01mreturn[39;00m [43mopen_files[49m[43m([49m
[1;32m    420[0m [43m        [49m[43murlpath[49m[38;5;241;43m=[39;49m[43m[[49m[43murlpath[49m[43m][49m[43m,[49m
[1;32m    421[0m [43m        [49m[43mmode[49m[38;5;241;43m=[39;49m[43mmode[49m[43m,[49m
[1;32m    422[0m [43m        [49m[43mcompression[49m[38;5;241;43m=[39;49m[43mcompression[49m[43m,[49m
[1;32m    423[0m [43m        [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m,[49m
[1;32m    424[0m [43m        [49m[43merrors[49m[38;5;241;43m=[39;49m[43merrors[49m[43m,[49m
[1;32m    425[0m [43m        [49m[43mprotocol[49m[38;5;241;43m=[39;49m[43mprotocol[49m[43m,[49m
[1;32m    426[0m [43m        [49m[43mnewline[49m[38;5;241;43m=[39;49m[43mnewline[49m[43m,[49m
[1;32m    427[0m [43m        [49m[43mexpand[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[1;32m    428[0m [43m        [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    429[0m [43m    [49m[43m)[49m[[38;5;241m0[39m]

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/core.py:272[0m, in [0;36mopen_files[0;34m(urlpath, mode, compression, encoding, errors, name_function, num, protocol, newline, auto_mkdir, expand, **kwargs)[0m
[1;32m    203[0m [38;5;28;01mdef[39;00m [38;5;21mopen_files[39m(
[1;32m    204[0m     urlpath,
[1;32m    205[0m     mode[38;5;241m=[39m[38;5;124m"[39m[38;5;124mrb[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m    215[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs,
[1;32m    216[0m ):
[1;32m    217[0m [38;5;250m    [39m[38;5;124;03m"""Given a path or paths, return a list of ``OpenFile`` objects.[39;00m
[1;32m    218[0m 
[1;32m    219[0m [38;5;124;03m    For writing, a str path must contain the "*" character, which will be filled[39;00m
[0;32m   (...)[0m
[1;32m    270[0m [38;5;124;03m    be used as a single context[39;00m
[1;32m    271[0m [38;5;124;03m    """[39;00m
[0;32m--> 272[0m     fs, fs_token, paths [38;5;241m=[39m [43mget_fs_token_paths[49m[43m([49m
[1;32m    273[0m [43m        [49m[43murlpath[49m[43m,[49m
[1;32m    274[0m [43m        [49m[43mmode[49m[43m,[49m
[1;32m    275[0m [43m        [49m[43mnum[49m[38;5;241;43m=[39;49m[43mnum[49m[43m,[49m
[1;32m    276[0m [43m        [49m[43mname_function[49m[38;5;241;43m=[39;49m[43mname_function[49m[43m,[49m
[1;32m    277[0m [43m        [49m[43mstorage_options[49m[38;5;241;43m=[39;49m[43mkwargs[49m[43m,[49m
[1;32m    278[0m [43m        [49m[43mprotocol[49m[38;5;241;43m=[39;49m[43mprotocol[49m[43m,[49m
[1;32m    279[0m [43m        [49m[43mexpand[49m[38;5;241;43m=[39;49m[43mexpand[49m[43m,[49m
[1;32m    280[0m [43m    [49m[43m)[49m
[1;32m    281[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mr[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode [38;5;129;01mand[39;00m auto_mkdir:
[1;32m    282[0m         parents [38;5;241m=[39m {fs[38;5;241m.[39m_parent(path) [38;5;28;01mfor[39;00m path [38;5;129;01min[39;00m paths}

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/core.py:574[0m, in [0;36mget_fs_token_paths[0;34m(urlpath, mode, num, name_function, storage_options, protocol, expand)[0m
[1;32m    572[0m [38;5;28;01mif[39;00m protocol:
[1;32m    573[0m     storage_options[[38;5;124m"[39m[38;5;124mprotocol[39m[38;5;124m"[39m] [38;5;241m=[39m protocol
[0;32m--> 574[0m chain [38;5;241m=[39m [43m_un_chain[49m[43m([49m[43murlpath0[49m[43m,[49m[43m [49m[43mstorage_options[49m[43m [49m[38;5;129;43;01mor[39;49;00m[43m [49m[43m{[49m[43m}[49m[43m)[49m
[1;32m    575[0m inkwargs [38;5;241m=[39m {}
[1;32m    576[0m [38;5;66;03m# Reverse iterate the chain, creating a nested target_* structure[39;00m

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/core.py:315[0m, in [0;36m_un_chain[0;34m(path, kwargs)[0m
[1;32m    313[0m [38;5;28;01mfor[39;00m bit [38;5;129;01min[39;00m [38;5;28mreversed[39m(bits):
[1;32m    314[0m     protocol [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mprotocol[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m) [38;5;129;01mor[39;00m split_protocol(bit)[[38;5;241m0[39m] [38;5;129;01mor[39;00m [38;5;124m"[39m[38;5;124mfile[39m[38;5;124m"[39m
[0;32m--> 315[0m     [38;5;28mcls[39m [38;5;241m=[39m [43mget_filesystem_class[49m[43m([49m[43mprotocol[49m[43m)[49m
[1;32m    316[0m     extra_kwargs [38;5;241m=[39m [38;5;28mcls[39m[38;5;241m.[39m_get_kwargs_from_urls(bit)
[1;32m    317[0m     kws [38;5;241m=[39m kwargs[38;5;241m.[39mpop(protocol, {})

File [0;32m/usr/share/miniconda3/envs/cookbook-dev/lib/python3.10/site-packages/fsspec/registry.py:213[0m, in [0;36mget_filesystem_class[0;34m(protocol)[0m
[1;32m    211[0m         register_implementation(protocol, _import_class(bit[[38;5;124m"[39m[38;5;124mclass[39m[38;5;124m"[39m]))
[1;32m    212[0m     [38;5;28;01mexcept[39;00m [38;5;167;01mImportError[39;00m [38;5;28;01mas[39;00m e:
[0;32m--> 213[0m         [38;5;28;01mraise[39;00m [38;5;167;01mImportError[39;00m(bit[[38;5;124m"[39m[38;5;124merr[39m[38;5;124m"[39m]) [38;5;28;01mfrom[39;00m [38;5;21;01me[39;00m
[1;32m    214[0m [38;5;28mcls[39m [38;5;241m=[39m registry[protocol]
[1;32m    215[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m([38;5;28mcls[39m, [38;5;124m"[39m[38;5;124mprotocol[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m) [38;5;129;01min[39;00m ([38;5;124m"[39m[38;5;124mabstract[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m):

[0;31mImportError[0m: Install s3fs to access S3
ImportError: Install s3fs to access S3


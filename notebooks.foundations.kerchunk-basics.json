{"version":2,"kind":"Notebook","sha256":"9c43340e2b1d59b56653eed15850475da6dd7ce0caec86ee3712dd8faf128143","slug":"notebooks.foundations.kerchunk-basics","location":"/notebooks/foundations/01_kerchunk_basics.ipynb","dependencies":[],"frontmatter":{"title":"Basics of virtual Zarr stores","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"kerchunk-cookbook","language":"python"},"authors":[{"nameParsed":{"literal":"Norland Raphael Hagen","given":"Norland Raphael","family":"Hagen"},"name":"Norland Raphael Hagen","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/kerchunk-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/kerchunk-cookbook/blob/main/notebooks/foundations/01_kerchunk_basics.ipynb","thumbnail":"/kerchunk-cookbook/build/thumbnail-e94c0ff712cdef5f24ce46dac0f879cc.png","exports":[{"format":"ipynb","filename":"01_kerchunk_basics.ipynb","url":"/kerchunk-cookbook/build/01_kerchunk_basics-c5243794098e0d2471f1bbced3926b33.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/kerchunk-cookbook/build/thumbnail-e94c0ff712cdef5f24ce46dac0f879cc.png","alt":"Kerchunk Logo","width":500,"key":"MP66C7FwF7","urlSource":"../../thumbnail.png"}],"key":"GBrZzK2TT9"}],"key":"ohBMivCZXO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Basics of virtual Zarr stores","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ipwhhZrA2h"}],"identifier":"basics-of-virtual-zarr-stores","label":"Basics of virtual Zarr stores","html_id":"basics-of-virtual-zarr-stores","implicit":true,"key":"bJFgbW1tBe"}],"key":"GvigyuW17T"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v2jT9rmuZB"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"HdMinltGd4"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook is intended as an introduction to creating and using virtual Zarr stores.\nIn this tutorial we will:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YyKb3PP3b7"}],"key":"MMtJnQm04t"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Scan a single NetCDF4/HDF5 file to create a virtual dataset","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"JfGswtZ1vg"}],"key":"ENAAQZhCJ2"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Learn how to use the output using ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VRbsWSZgUd"},{"type":"inlineCode","value":"Xarray","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"s6xeO9wqGK"},{"type":"text","value":" and ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VLMbNTc8Py"},{"type":"inlineCode","value":"Zarr","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iY43UZs747"},{"type":"text","value":".","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CMUOg9G21P"}],"key":"UmwcrxF3yh"}],"key":"oI54iULn0f"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"While this notebook only examines using ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"FrSlfwR2wv"},{"type":"inlineCode","value":"VirtualiZarr","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"WckMcFYBnG"},{"type":"text","value":" and ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"rCDxPevNcR"},{"type":"inlineCode","value":"Kerchunk","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"T7ZvI3Bmhz"},{"type":"text","value":" on a single NetCDF file, these libraries can be used to create virtual ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Nk32NrxFSN"},{"type":"inlineCode","value":"Zarr","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"AxLNZ1WfRk"},{"type":"text","value":" datasets from collections of many input files. In the following notebook, we will demonstrate this.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"xOMBgUyP8j"}],"key":"nCrWDRWNRH"}],"key":"XMSwweJrun"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IULNUmVaOM"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"X4AHDiBRmJ"},{"type":"table","position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"FBU1fbIyUs"}],"key":"W8EhIwy9j2"},{"type":"tableCell","header":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"M7WCzJLVI2"}],"key":"HP5ZpbHpy2"},{"type":"tableCell","header":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ZSB9TSmVfZ"}],"key":"Kt9SH0prFh"}],"key":"LWfHuAcMCl"},{"type":"tableRow","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/xarray-intro.html","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Introduction to Xarray","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"wDASncvTg3"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/xarray-intro.html","key":"hwBmisNiPk"}],"key":"M9VqfDVc4u"},{"type":"tableCell","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"MnMHlNusG1"}],"key":"u5l3Mn4OVd"},{"type":"tableCell","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Basic features","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"iJfSOdRNDK"}],"key":"ipZUcvkvR3"}],"key":"WfqbAdDKoN"}],"key":"BfwJ9ZcbpL"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"wRmk1B0OtZ"}],"key":"WPcMW56tCh"},{"type":"text","value":": 60 minutes","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"PrAMz6wSXJ"}],"key":"xeHIR2QJA0"}],"key":"NQ26sEazJM"},{"type":"thematicBreak","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"X53kRm0BMz"}],"key":"aJr9qAlzTr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nSb0UuoBfy"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"CFynfXgOEi"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we will import a few ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NvHJiuq9ce"},{"type":"inlineCode","value":"Python","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KiwWo5tBD4"},{"type":"text","value":" libraries to help with our data processing.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b6tQAcRmeO"}],"key":"sO5pWrWHea"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"inlineCode","value":"virtualizarr","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"reAqKEnY6e"},{"type":"text","value":" will be used to generate the virtual Zarr store","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"AnJMP2OL0p"}],"key":"jgyG1YYO2M"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"inlineCode","value":"Xarray","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mRzymVj9L0"},{"type":"text","value":" for examining the output dataset","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DH3ArtimAz"}],"key":"xFDCe5NwU8"}],"key":"ovkFSkaHMy"}],"key":"qpmRFDPwW4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr\nfrom virtualizarr import open_virtual_dataset","key":"ffdaUvp2fV"},{"type":"output","id":"ri9a0Dy1o7ZseA8yf6vSU","data":[],"key":"RQfcUYlQXv"}],"key":"xexmh0AT9H"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define storage_options arguments","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pNrT0Yxw8F"}],"identifier":"define-storage-options-arguments","label":"Define storage_options arguments","html_id":"define-storage-options-arguments","implicit":true,"key":"DUtp96UWGP"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the dictionary definition in the next cell, we are defining the options that will be passed to ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JZqr7pKOXA"},{"type":"link","url":"https://filesystem-spec.readthedocs.io/en/latest/api.html?highlight=.open#fsspec.open","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"fsspec.open","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XXwy16YRak"}],"urlSource":"https://filesystem-spec.readthedocs.io/en/latest/api.html?highlight=.open#fsspec.open","key":"jx1MgD4qN1"},{"type":"text","value":". Any additional kwargs passed in this dictionary through ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GNrrm8Lc4c"},{"type":"inlineCode","value":"fsspec.open","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IwOj30pgBi"},{"type":"text","value":" will pass as kwargs to the file system, in our case ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oFOBhhJi8d"},{"type":"inlineCode","value":"s3","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YC8zR8R2RH"},{"type":"text","value":". The API docs for the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EuhgSLO3TE"},{"type":"inlineCode","value":"s3fs","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tmkF9d9xMF"},{"type":"text","value":" filesystem spec can be found ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HiCUtN4WqH"},{"type":"link","url":"https://s3fs.readthedocs.io/en/latest/api.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZF3p1JIBTl"}],"urlSource":"https://s3fs.readthedocs.io/en/latest/api.html","key":"a6ZaUEaREU"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UFsUycYx4j"}],"key":"ZbZ25k95gw"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In this example we are passing a few kwargs. In short they are:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"brxhu73g57"}],"key":"BcPacKOgYG"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"inlineCode","value":"anon=True","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"FtFBmE35ur"},{"type":"text","value":": This is a ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"DX2bmocLZF"},{"type":"inlineCode","value":"s3fs","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VgGN8XaFoX"},{"type":"text","value":" kwarg that specifies you are not passing any connection credentials and are connecting to a public bucket.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"a1DjrUDPMq"}],"key":"xP7yQ3RNef"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"inlineCode","value":"default_fill_cache=False","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"kq2I3rOBkE"},{"type":"text","value":": ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ZyBvimLd5B"},{"type":"inlineCode","value":"s3fs","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"U3Ws8RtUHv"},{"type":"text","value":" kwarg that avoids caching in between chunks of files. This may lower memory usage when reading large files.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"EorveaT6ea"}],"key":"Jb91iojzcC"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"inlineCode","value":"default_cache_type=\"none\"","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"yQMoEAscQj"},{"type":"text","value":": ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"wT7QRGvesv"},{"type":"inlineCode","value":"fsspec","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"GpalJNxeio"},{"type":"text","value":" kwarg that specifies the caching strategy used by ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"vWjxK9UHbh"},{"type":"inlineCode","value":"fsspec","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"l4JjDV7Hs9"},{"type":"text","value":". In this case, we turn off caching entirely to lower memory usage when only using the information from the file once..","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"j09fcJXU89"}],"key":"UbbekA122f"}],"key":"cZDjE0Tuvd"}],"key":"UeDT8KjHM7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"storage_options = dict(anon=True, default_fill_cache=False, default_cache_type=\"none\")","key":"xw0MJBtqt0"},{"type":"output","id":"gI0oodi2DRdHal3eg9Z3H","data":[],"key":"NeR0uewfEA"}],"key":"EYuKhfs3se"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Virtualize a single NetCDF file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PDZgWhShYS"}],"identifier":"virtualize-a-single-netcdf-file","label":"Virtualize a single NetCDF file","html_id":"virtualize-a-single-netcdf-file","implicit":true,"key":"l5LGRR5F8g"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Below we will virtualize a NetCDF file stored on the AWS cloud. This dataset is a single time slice of a climate downscaled product for Alaska.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zKJE94g4z0"}],"key":"cD2EZ6gcP2"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The steps in the cell below are as follows:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eig2XAKUrO"}],"key":"FecypKanzQ"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Create a virtual dataset using ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Xu6vPYH1CR"},{"type":"inlineCode","value":"open_virtual_dataset","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"piePIVNiDn"}],"key":"WwdGw3ZJdr"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Write the virtual store as a Kerchunk reference JSON using the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"tv6MqNXuQl"},{"type":"inlineCode","value":"to_kerchunk","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"BtFjM3TkWJ"},{"type":"text","value":" method.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"unLd9xvWn8"}],"key":"YB5zRPn37O"}],"key":"SKClw026eD"}],"key":"whNUggoput"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Input URL to dataset. Note this is a netcdf file stored on s3 (cloud dataset).\nurl = \"s3://wrf-se-ak-ar5/ccsm/rcp85/daily/2060/WRFDS_2060-01-01.nc\"\n\n\n# Create a virtual dataset using VirtualiZarr.\n# We specify `indexes={}` to avoid creating in-memory pandas indexes for each 1D coordinate, since concatenating with pandas indexes is not yet supported in VirtualiZarr\nvirtual_ds = open_virtual_dataset(\n    url, indexes={}, reader_options={\"storage_options\": storage_options}\n)\n# Write the virtual dataset to disk as a Kerchunk JSON. We could alternative write to a Kerchunk JSON or Icechunk Store.\nvirtual_ds.virtualize.to_kerchunk(\"single_file_kerchunk.json\", format=\"json\")","key":"DvXNx0TPPG"},{"type":"output","id":"bGNX95eD4YayBZVg9Z4Ib","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mAttributeError\u001b[39m                            Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 7\u001b[39m\n\u001b[32m      2\u001b[39m url = \u001b[33m\"\u001b[39m\u001b[33ms3://wrf-se-ak-ar5/ccsm/rcp85/daily/2060/WRFDS_2060-01-01.nc\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m      5\u001b[39m \u001b[38;5;66;03m# Create a virtual dataset using VirtualiZarr.\u001b[39;00m\n\u001b[32m      6\u001b[39m \u001b[38;5;66;03m# We specify `indexes={}` to avoid creating in-memory pandas indexes for each 1D coordinate, since concatenating with pandas indexes is not yet supported in VirtualiZarr\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m7\u001b[39m virtual_ds = \u001b[43mopen_virtual_dataset\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      8\u001b[39m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexes\u001b[49m\u001b[43m=\u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreader_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43m{\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mstorage_options\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m}\u001b[49m\n\u001b[32m      9\u001b[39m \u001b[43m)\u001b[49m\n\u001b[32m     10\u001b[39m \u001b[38;5;66;03m# Write the virtual dataset to disk as a Kerchunk JSON. We could alternative write to a Kerchunk JSON or Icechunk Store.\u001b[39;00m\n\u001b[32m     11\u001b[39m virtual_ds.virtualize.to_kerchunk(\u001b[33m\"\u001b[39m\u001b[33msingle_file_kerchunk.json\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28mformat\u001b[39m=\u001b[33m\"\u001b[39m\u001b[33mjson\u001b[39m\u001b[33m\"\u001b[39m)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/virtualizarr/backend.py:182\u001b[39m, in \u001b[36mopen_virtual_dataset\u001b[39m\u001b[34m(filepath, filetype, group, drop_variables, loadable_variables, decode_times, cftime_variables, indexes, virtual_array_class, virtual_backend_kwargs, reader_options, backend)\u001b[39m\n\u001b[32m    179\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mCannot pass both a filetype and an explicit VirtualBackend\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    181\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m filetype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m182\u001b[39m     filetype = \u001b[43mautomatically_determine_filetype\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    183\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfilepath\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfilepath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreader_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mreader_options\u001b[49m\n\u001b[32m    184\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    185\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(filetype, \u001b[38;5;28mstr\u001b[39m):\n\u001b[32m    186\u001b[39m     \u001b[38;5;66;03m# if filetype is a user defined string, convert to FileType\u001b[39;00m\n\u001b[32m    187\u001b[39m     filetype = FileType(filetype.lower())\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/virtualizarr/backend.py:77\u001b[39m, in \u001b[36mautomatically_determine_filetype\u001b[39m\u001b[34m(filepath, reader_options)\u001b[39m\n\u001b[32m     72\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mNotImplementedError\u001b[39;00m()\n\u001b[32m     74\u001b[39m \u001b[38;5;66;03m# Read magic bytes from local or remote file\u001b[39;00m\n\u001b[32m     75\u001b[39m fpath = \u001b[43m_FsspecFSFromFilepath\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m     76\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilepath\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfilepath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreader_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mreader_options\u001b[49m\n\u001b[32m---> \u001b[39m\u001b[32m77\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_file\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     78\u001b[39m magic_bytes = fpath.read(\u001b[32m8\u001b[39m)\n\u001b[32m     79\u001b[39m fpath.close()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/virtualizarr/utils.py:47\u001b[39m, in \u001b[36m_FsspecFSFromFilepath.open_file\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m     39\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mopen_file\u001b[39m(\u001b[38;5;28mself\u001b[39m) -> OpenFileType:\n\u001b[32m     40\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"Calls `.open` on fsspec.Filesystem instantiation using self.filepath as an input.\u001b[39;00m\n\u001b[32m     41\u001b[39m \n\u001b[32m     42\u001b[39m \u001b[33;03m    Returns\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m     45\u001b[39m \u001b[33;03m        file opened with fsspec\u001b[39;00m\n\u001b[32m     46\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m47\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfilepath\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/spec.py:1338\u001b[39m, in \u001b[36mAbstractFileSystem.open\u001b[39m\u001b[34m(self, path, mode, block_size, cache_options, compression, **kwargs)\u001b[39m\n\u001b[32m   1336\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   1337\u001b[39m     ac = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33mautocommit\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m._intrans)\n\u001b[32m-> \u001b[39m\u001b[32m1338\u001b[39m     f = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_open\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   1339\u001b[39m \u001b[43m        \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1340\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1341\u001b[39m \u001b[43m        \u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m=\u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1342\u001b[39m \u001b[43m        \u001b[49m\u001b[43mautocommit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mac\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1343\u001b[39m \u001b[43m        \u001b[49m\u001b[43mcache_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcache_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1344\u001b[39m \u001b[43m        \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1345\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1346\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m compression \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m   1347\u001b[39m         \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mfsspec\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mcompression\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m compr\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:489\u001b[39m, in \u001b[36mS3FileSystem._open\u001b[39m\u001b[34m(self, path, mode, block_size, acl, version_id, fill_cache, cache_type, autocommit, requester_pays, **kwargs)\u001b[39m\n\u001b[32m    486\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m cache_type \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    487\u001b[39m     cache_type = \u001b[38;5;28mself\u001b[39m.default_cache_type\n\u001b[32m--> \u001b[39m\u001b[32m489\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mS3File\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    490\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    491\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    492\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    493\u001b[39m \u001b[43m    \u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m=\u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    494\u001b[39m \u001b[43m    \u001b[49m\u001b[43macl\u001b[49m\u001b[43m=\u001b[49m\u001b[43macl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    495\u001b[39m \u001b[43m    \u001b[49m\u001b[43mversion_id\u001b[49m\u001b[43m=\u001b[49m\u001b[43mversion_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    496\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfill_cache\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfill_cache\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    497\u001b[39m \u001b[43m    \u001b[49m\u001b[43ms3_additional_kwargs\u001b[49m\u001b[43m=\u001b[49m\u001b[43mkw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    498\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcache_type\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcache_type\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    499\u001b[39m \u001b[43m    \u001b[49m\u001b[43mautocommit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mautocommit\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    500\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrequester_pays\u001b[49m\u001b[43m=\u001b[49m\u001b[43mrequester_pays\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    501\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:1659\u001b[39m, in \u001b[36mS3File.__init__\u001b[39m\u001b[34m(self, s3, path, mode, block_size, acl, version_id, fill_cache, s3_additional_kwargs, autocommit, cache_type, requester_pays)\u001b[39m\n\u001b[32m   1657\u001b[39m         \u001b[38;5;28mself\u001b[39m.details = s3.info(path)\n\u001b[32m   1658\u001b[39m         \u001b[38;5;28mself\u001b[39m.version_id = \u001b[38;5;28mself\u001b[39m.details.get(\u001b[33m\"\u001b[39m\u001b[33mVersionId\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m-> \u001b[39m\u001b[32m1659\u001b[39m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[34;43m__init__\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[32m   1660\u001b[39m \u001b[43m    \u001b[49m\u001b[43ms3\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mautocommit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mautocommit\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcache_type\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcache_type\u001b[49m\n\u001b[32m   1661\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1662\u001b[39m \u001b[38;5;28mself\u001b[39m.s3 = \u001b[38;5;28mself\u001b[39m.fs  \u001b[38;5;66;03m# compatibility\u001b[39;00m\n\u001b[32m   1664\u001b[39m \u001b[38;5;66;03m# when not using autocommit we want to have transactional state to manage\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/spec.py:1912\u001b[39m, in \u001b[36mAbstractBufferedFile.__init__\u001b[39m\u001b[34m(self, fs, path, mode, block_size, autocommit, cache_type, cache_options, size, **kwargs)\u001b[39m\n\u001b[32m   1910\u001b[39m         \u001b[38;5;28mself\u001b[39m.size = size\n\u001b[32m   1911\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1912\u001b[39m         \u001b[38;5;28mself\u001b[39m.size = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mdetails\u001b[49m[\u001b[33m\"\u001b[39m\u001b[33msize\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m   1913\u001b[39m     \u001b[38;5;28mself\u001b[39m.cache = caches[cache_type](\n\u001b[32m   1914\u001b[39m         \u001b[38;5;28mself\u001b[39m.blocksize, \u001b[38;5;28mself\u001b[39m._fetch_range, \u001b[38;5;28mself\u001b[39m.size, **cache_options\n\u001b[32m   1915\u001b[39m     )\n\u001b[32m   1916\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/spec.py:1925\u001b[39m, in \u001b[36mAbstractBufferedFile.details\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m   1922\u001b[39m \u001b[38;5;129m@property\u001b[39m\n\u001b[32m   1923\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mdetails\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m   1924\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m._details \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1925\u001b[39m         \u001b[38;5;28mself\u001b[39m._details = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfs\u001b[49m\u001b[43m.\u001b[49m\u001b[43minfo\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1926\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._details\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:118\u001b[39m, in \u001b[36msync_wrapper.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    115\u001b[39m \u001b[38;5;129m@functools\u001b[39m.wraps(func)\n\u001b[32m    116\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mwrapper\u001b[39m(*args, **kwargs):\n\u001b[32m    117\u001b[39m     \u001b[38;5;28mself\u001b[39m = obj \u001b[38;5;129;01mor\u001b[39;00m args[\u001b[32m0\u001b[39m]\n\u001b[32m--> \u001b[39m\u001b[32m118\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msync\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mloop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:103\u001b[39m, in \u001b[36msync\u001b[39m\u001b[34m(loop, func, timeout, *args, **kwargs)\u001b[39m\n\u001b[32m    101\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m FSTimeoutError \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mreturn_result\u001b[39;00m\n\u001b[32m    102\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(return_result, \u001b[38;5;167;01mBaseException\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m103\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m return_result\n\u001b[32m    104\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    105\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m return_result\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/fsspec/asyn.py:56\u001b[39m, in \u001b[36m_runner\u001b[39m\u001b[34m(event, coro, result, timeout)\u001b[39m\n\u001b[32m     54\u001b[39m     coro = asyncio.wait_for(coro, timeout=timeout)\n\u001b[32m     55\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m---> \u001b[39m\u001b[32m56\u001b[39m     result[\u001b[32m0\u001b[39m] = \u001b[38;5;28;01mawait\u001b[39;00m coro\n\u001b[32m     57\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\u001b[32m     58\u001b[39m     result[\u001b[32m0\u001b[39m] = ex\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:910\u001b[39m, in \u001b[36mS3FileSystem._info\u001b[39m\u001b[34m(self, path, bucket, key, refresh, version_id)\u001b[39m\n\u001b[32m    908\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m key:\n\u001b[32m    909\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m910\u001b[39m         out = \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._call_s3(\n\u001b[32m    911\u001b[39m             \u001b[33m\"\u001b[39m\u001b[33mhead_object\u001b[39m\u001b[33m\"\u001b[39m,\n\u001b[32m    912\u001b[39m             \u001b[38;5;28mself\u001b[39m.kwargs,\n\u001b[32m    913\u001b[39m             Bucket=bucket,\n\u001b[32m    914\u001b[39m             Key=key,\n\u001b[32m    915\u001b[39m             **version_id_kw(version_id),\n\u001b[32m    916\u001b[39m             **\u001b[38;5;28mself\u001b[39m.req_kw,\n\u001b[32m    917\u001b[39m         )\n\u001b[32m    918\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[32m    919\u001b[39m             \u001b[33m\"\u001b[39m\u001b[33mETag\u001b[39m\u001b[33m\"\u001b[39m: out[\u001b[33m\"\u001b[39m\u001b[33mETag\u001b[39m\u001b[33m\"\u001b[39m],\n\u001b[32m    920\u001b[39m             \u001b[33m\"\u001b[39m\u001b[33mKey\u001b[39m\u001b[33m\"\u001b[39m: \u001b[33m\"\u001b[39m\u001b[33m/\u001b[39m\u001b[33m\"\u001b[39m.join([bucket, key]),\n\u001b[32m   (...)\u001b[39m\u001b[32m    927\u001b[39m             \u001b[33m\"\u001b[39m\u001b[33mVersionId\u001b[39m\u001b[33m\"\u001b[39m: out.get(\u001b[33m\"\u001b[39m\u001b[33mVersionId\u001b[39m\u001b[33m\"\u001b[39m),\n\u001b[32m    928\u001b[39m         }\n\u001b[32m    929\u001b[39m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:228\u001b[39m, in \u001b[36mS3FileSystem._call_s3\u001b[39m\u001b[34m(self, method, *akwarglist, **kwargs)\u001b[39m\n\u001b[32m    227\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_call_s3\u001b[39m(\u001b[38;5;28mself\u001b[39m, method, *akwarglist, **kwargs):\n\u001b[32m--> \u001b[39m\u001b[32m228\u001b[39m     \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._connect()\n\u001b[32m    229\u001b[39m     method = \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m.s3, method)\n\u001b[32m    230\u001b[39m     kw2 = kwargs.copy()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/kerchunk-cookbook/lib/python3.13/site-packages/s3fs/core.py:365\u001b[39m, in \u001b[36mS3FileSystem._connect\u001b[39m\u001b[34m(self, refresh, kwargs)\u001b[39m\n\u001b[32m    363\u001b[39m     config_kwargs[\u001b[33m\"\u001b[39m\u001b[33msignature_version\u001b[39m\u001b[33m\"\u001b[39m] = UNSIGNED\n\u001b[32m    364\u001b[39m conf = AioConfig(**config_kwargs)\n\u001b[32m--> \u001b[39m\u001b[32m365\u001b[39m \u001b[38;5;28mself\u001b[39m.session = \u001b[43maiobotocore\u001b[49m\u001b[43m.\u001b[49m\u001b[43mAioSession\u001b[49m(**\u001b[38;5;28mself\u001b[39m.kwargs)\n\u001b[32m    366\u001b[39m s3creator = \u001b[38;5;28mself\u001b[39m.session.create_client(\n\u001b[32m    367\u001b[39m     \u001b[33m\"\u001b[39m\u001b[33ms3\u001b[39m\u001b[33m\"\u001b[39m, config=conf, **init_kwargs, **client_kwargs\n\u001b[32m    368\u001b[39m )\n\u001b[32m    369\u001b[39m \u001b[38;5;28mself\u001b[39m._s3creator = s3creator\n\n\u001b[31mAttributeError\u001b[39m: module 'aiobotocore' has no attribute 'AioSession'","ename":"AttributeError","evalue":"module 'aiobotocore' has no attribute 'AioSession'"}],"key":"mGm4IX61zg"}],"key":"KK5sbJbsEx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Opening virtual datasets","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bRp06qmVx6"}],"identifier":"opening-virtual-datasets","label":"Opening virtual datasets","html_id":"opening-virtual-datasets","implicit":true,"key":"ZcTOZwb6Tc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the section below we will use the previously created ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OVDrziJj9P"},{"type":"inlineCode","value":"Kerchunk","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"o7KmFVpCPG"},{"type":"text","value":" reference JSON to open the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GGdi7GLRsW"},{"type":"inlineCode","value":"NetCDF","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sDLvb64jrt"},{"type":"text","value":" file as if it were a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gqAXlsZHOX"},{"type":"inlineCode","value":"Zarr","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"y33LPFcunB"},{"type":"text","value":" dataset.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"e5nFp7kKx6"}],"key":"PBb3ixaVVq"}],"key":"LOELHE191L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# We once again need to provide information for fsspec to access the remote file\nstorage_options = dict(\n    remote_protocol=\"s3\", remote_options=dict(anon=True), skip_instance_cache=True\n)\n# We will use the \"kerchunk\" engine in `xr.open_dataset` and pass the `storage_options` to the `kerchunk` engine through `backend_kwargs`\nds = xr.open_dataset(\n    \"single_file_kerchunk.json\",\n    engine=\"kerchunk\",\n    backend_kwargs={\"storage_options\": storage_options},\n)\nds","key":"j7wmEc7W5S"},{"type":"output","id":"5SwOGTyv5ZitXfLM3bEHz","data":[],"key":"vNxdqIAI0p"}],"key":"OUfEeVFptm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot dataset","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sHbG9jYX27"}],"identifier":"plot-dataset","label":"Plot dataset","html_id":"plot-dataset","implicit":true,"key":"Ag7YuchYjD"}],"key":"qIWkn5g09Y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds.TMAX.plot()","key":"Ycs0IyAeFc"},{"type":"output","id":"BpgmpmOEPbcxMe3pbVkXX","data":[],"key":"SrOox4rLHh"}],"key":"eilhkBxUZD"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that the original .nc file size here is 16.8MB, and the created JSON is 26.5kB. These files also tend to compress very well. As you can see, it the JSON can be written anywhere, and gives us access to the underlying data, reading only the chunks we need from remote without downloading the whole file.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FlTWhSuoud"}],"key":"PwFYAF4X6Q"}],"key":"p4HOi5DW1z"}],"key":"QZJPgwUtwt"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"How to Cite This Cookbook","url":"/notebooks/how-to-cite","group":"Preamble"},"next":{"title":"Multi-file virtual datasets with VirtualiZarr","url":"/notebooks/foundations/kerchunk-multi-file","group":"Foundations"}}},"domain":"http://localhost:3000"}